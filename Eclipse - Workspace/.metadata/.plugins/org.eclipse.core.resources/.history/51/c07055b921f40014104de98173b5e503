package br.ufs.dsi.redes_sensores.model;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.util.ArrayList;

public class Grafo {
	
	private ArrayList<Vertice> vertices;
	
	public Grafo(){
		vertices = new ArrayList<Vertice>();
	}
	
	public void inserirVerticesPeloArquivo(String caminhoArquivo){
		File arquivo;
		FileReader fr;
		BufferedReader br;
		LineNumberReader ln;
		try{
			// Criando um objeto File para apontar para o arquivo
			arquivo = new File(caminhoArquivo);

			// Verificando se o arquivo existe 
			if(arquivo.exists()){
				
				// Obtendo a quantidade de Linhas / Vértices
				fr = new FileReader(arquivo);
				ln = new LineNumberReader(fr);
				ln.skip(arquivo.length());
				int numVertices = ln.getLineNumber() + 1;
				ln.close();
				fr.close();
				
				// Preparando para ler o arquivo
				fr = new FileReader(arquivo);
				br = new BufferedReader(fr);
				
				// Se for possível ler o arquivo, executará os comandos dentro do if
				if(br.ready()){

					// Instanciando a matriz de adjacência
					grafo = new int [numVertices][numVertices];
					
					int i = 0;
					while(br.ready() && i < numVertices){
						
						// Lendo a linha
						String[] linha = br.readLine().split(";");
						
						/*
						   Lançando uma exceção porque o arquivo é mal formatado
						   Verificação da quantidade de colunas com a quantidade de linhas
						*/
						if(numVertices != linha.length)
							throw new Exception("Arquivo Mal Formatado!!!");
						
						// Inicializando a matriz de adjacência
						for (int j = 0; j < numVertices; j++)
							grafo[i][j] = Integer.parseInt(linha[j]);
						i++;
					}
				}
				
				// Fechando os objetos de manipulação de arquivo
				br.close();
				fr.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1);
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

}
