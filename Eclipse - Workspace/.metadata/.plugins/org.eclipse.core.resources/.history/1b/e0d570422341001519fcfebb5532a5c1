package proj_dist;

import java.util.ArrayList;

import javax.swing.JOptionPane;

public class Execucao {
	
	public static enum tipo_metodo { TIPO_1, TIPO_2 };
	
	/**
	 * Método main para executar os projetos.
	 */
	public static void main(String[] args) {
		int tipo;
		do {
			tipo = Integer.parseInt(JOptionPane.showInputDialog(null,
					"Informe o tipo do projeto:\n" +
					"1- Coloração com Cálculo de Prioridade\n" +
					"2- Coloração por Método Vetor\n" + 
					"3- Coloração Distribuída\n" + 
					"0 - Encerrar o programa", "Entrada", JOptionPane.QUESTION_MESSAGE));
		} while(tipo < 0 && tipo > 3);
		
		if(tipo == 3){
			int numTotalVertices = Integer.parseInt(JOptionPane.showInputDialog(null, "Entre com a quantidade de vértices", "Entrada", JOptionPane.QUESTION_MESSAGE));
			double raio = Double.parseDouble(JOptionPane.showInputDialog(null, "Entre com o valor do raio \n (Use o ponto como separador de casas decimais)", "Entrada", JOptionPane.QUESTION_MESSAGE));
			double areaTotal = Double.parseDouble(JOptionPane.showInputDialog(null, "Entre com o valor da área total \n (Use o ponto como separador de casas decimais)", "Entrada", JOptionPane.QUESTION_MESSAGE));
			int simOuNao = JOptionPane.showConfirmDialog(null, "Deseja executar o projeto com Dilution?", "Entrada", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
			boolean comDilution = (simOuNao == JOptionPane.YES_OPTION) ? true : false;
			
			Algoritmo_Distribuido dist = new Algoritmo_Distribuido(numTotalVertices, raio, areaTotal, comDilution);
			
			// Inicializa os vértices
			dist.inicializaVertices();
			
			// Mostra o vértices pelos identificadores
			dist.mostraId();
			System.out.println();
			
			// Mostra o vértices pelos identificadores e posições
			dist.mostraIdPosicoes();
			System.out.println();
			
			/*
			// Variável para determinar o tempo para colorir o grid (tempo em milisegundos)
			long tempo = System.currentTimeMillis();
			
			// Tempo Total = Tempo Final - Tempo Inicial
			tempo = System.currentTimeMillis() - tempo;
			System.out.println("Tempo de Processamento em milisegundos: " + tempo);
			System.out.println();
			
			// Mostra o grid pelas cores
			dist.mostraCor();
			*/
			System.out.println("\n\nTestes: ");
			ArrayList<Distancia> distancias = dist.getVertices().get(1).getDistancias();
			/*for(Distancia di : distancias){
				System.out.println(di.getVertice() + " - " + di.getDistancia());
			}*/
			Distancia d = distancias.get(0);
			System.out.println(d.getVertice() + " - " + d.getDistancia());
			
			// Mostra informações do grid
			System.out.println();
			System.out.println(dist.toString());
		}
	}
}